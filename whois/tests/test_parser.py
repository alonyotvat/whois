import time
import unittest

from .. import querier


class ParserTestCase(
    unittest.TestCase,
):
    def test_com(
        self,
    ):
        for domain in (
            '1and1.com',
            'about.com',
            'accuweather.com',
            'acquirethisname.com',
            'adage.com',
            'addthis.com',
            'addtoany.com',
            'adition.com',
            'adobe.com',
            'adweek.com',
            'afternic.com',
            'alexa.com',
            'aliyun.com',
            'amazon.com',
            'android.com',
            'aol.com',
            'apple.com',
            'areasnap.com',
            'arstechnica.com',
            'artisteer.com',
            'att.com',
            'barnesandnoble.com',
            'bbc.com',
            'bigcommerce.com',
            'billboard.com',
            'bing.com',
            'bizjournals.com',
            'blackberry.com',
            'bleacherreport.com',
            'blogger.com',
            'bloglines.com',
            'bloomberg.com',
            'bluehost.com',
            'booking.com',
            'boston.com',
            'businessinsider.com',
            'businessweek.com',
            'businesswire.com',
            'buydomains.com',
            'buzzfeed.com',
            'cafepress.com',
            'campaign-archive1.com',
            'campaign-archive2.com',
            'cargocollective.com',
            'cbslocal.com',
            'cbsnews.com',
            'cdbaby.com',
            'chicagotribune.com',
            'chronoengine.com',
            'cisco.com',
            'cnbc.com',
            'cnet.com',
            'cnn.com',
            'comsenz.com',
            'constantcontact.com',
            'cpanel.com',
            'cvent.com',
            'cyberchimps.com',
            'dailymotion.com',
            'dedecms.com',
            'delicious.com',
            'dell.com',
            'deloitte.com',
            'detik.com',
            'digg.com',
            'discovery.com',
            'dreamhost.com',
            'dribbble.com',
            'dropbox.com',
            'ebay.com',
            'economist.com',
            'eepurl.com',
            'elegantthemes.com',
            'elpais.com',
            'enable-javascript.com',
            'engadget.com',
            'enom.com',
            'entrepreneur.com',
            'ewebdevelopment.com',
            'examiner.com',
            'example.com',
            'facebook.com',
            'fastcompany.com',
            'fb.com',
            'feedburner.com',
            'feedsportal.com',
            'flickr.com',
            'forbes.com',
            'fortune.com',
            'fotolia.com',
            'foursquare.com',
            'foxnews.com',
            'ft.com',
            'gabia.com',
            'gartner.com',
            'geocities.com',
            'gigaom.com',
            'gizmodo.com',
            'globo.com',
            'go.com',
            'goodreads.com',
            'google.com',
            'hibu.com',
            'hilton.com',
            'histats.com',
            'hollywoodreporter.com',
            'hostgator.com',
            'houzz.com',
            'hp.com',
            'hubspot.com',
            'huffingtonpost.com',
            'hugedomains.com',
            'ibm.com',
            'ifeng.com',
            'imdb.com',
            'imgur.com',
            'inc.com',
            'indeed.com',
            'indiatimes.com',
            'instagram.com',
            'intel.com',
            'issuu.com',
            'istockphoto.com',
            'iubenda.com',
            'java.com',
            'jdoqocy.com',
            'jiathis.com',
            'jquery.com',
            'justgiving.com',
            'kickstarter.com',
            'kpn.com',
            'latimes.com',
            'lerelaisinternet.com',
            'linkedin.com',
            'linksynergy.com',
            'livestream.com',
            'macromedia.com',
            'mailchimp.com',
            'mapquest.com',
            'marketwatch.com',
            'marriott.com',
            'mashable.com',
            'microsoft.com',
            'mlb.com',
            'mozilla.com',
            'msdn.com',
            'mtv.com',
            'myspace.com',
            'mysql.com',
            'namejet.com',
            'nationalgeographic.com',
            'nature.com',
            'naver.com',
            'nba.com',
            'nbcnews.com',
            'netcraft.com',
            'netscape.com',
            'networksolutions.com',
            'newyorker.com',
            'nfl.com',
            'nginx.com',
            'nielsen.com',
            'nifty.com',
            'nike.com',
            'nydailynews.com',
            'nypost.com',
            'nytimes.com',
            'olark.com',
            'one.com',
            'opencart.com',
            'opera.com',
            'oracle.com',
            'oreilly.com',
            'ovh.com',
            'parallels.com',
            'paypal.com',
            'pcmag.com',
            'pcworld.com',
            'people.com',
            'photobucket.com',
            'phpbb.com',
            'pinterest.com',
            'politico.com',
            'presscustomizr.com',
            'prestashop.com',
            'prezi.com',
            'prnewswire.com',
            'prweb.com',
            'quantcast.com',
            'reddit.com',
            'reuters.com',
            'reverbnation.com',
            'rollingstone.com',
            'ructg.com',
            'sagepub.com',
            'samsung.com',
            'sciencedirect.com',
            'scientificamerican.com',
            'scribd.com',
            'searchengineland.com',
            'sedo.com',
            'sedoparking.com',
            'sfgate.com',
            'shareasale.com',
            'shinystat.com',
            'shopify.com',
            'sitemeter.com',
            'skype.com',
            'slate.com',
            'soundcloud.com',
            'spotify.com',
            'springer.com',
            'stackoverflow.com',
            'starwoodhotels.com',
            'statcounter.com',
            'steampowered.com',
            'storify.com',
            'studiopress.com',
            'stumbleupon.com',
            'sun.com',
            'surveymonkey.com',
            'symantec.com',
            'tandfonline.com',
            'teamviewer.com',
            'techcrunch.com',
            'technorati.com',
            'ted.com',
            'theatlantic.com',
            'thedailybeast.com',
            'theglobeandmail.com',
            'theguardian.com',
            'thehill.com',
            'thenextweb.com',
            'theverge.com',
            'ticketmaster.com',
            'time.com',
            'tkqlhce.com',
            'tripadvisor.com',
            'twitter.com',
            'umblr.com',
            'undeveloped.com',
            'ups.com',
            'usatoday.com',
            'usnews.com',
            'variety.com',
            'venturebeat.com',
            'viadeo.com',
            'vice.com',
            'vimeo.com',
            'vk.com',
            'w3schools.com',
            'walmart.com',
            'warnerbros.com',
            'washingtonpost.com',
            'weather.com',
            'web.com',
            'webmd.com',
            'weibo.com',
            'whoisprivacyprotect.com',
            'wikihow.com',
            'wiley.com',
            'windowsphone.com',
            'wired.com',
            'wn.com',
            'woothemes.com',
            'wowslider.com',
            'wp.com',
            'wsj.com',
            'wunderground.com',
            'xing.com',
            'xinhuanet.com',
            'xiti.com',
            'yellowbook.com',
            'yelp.com',
            'youku.com',
            'youronlinechoices.com',
            'youtube.com',
            'zanox.com',
            'zdnet.com',
            'zend.com',
        ):
            whois_querier = querier.Querier()
            parsed = whois_querier.query(
                domain=domain,
            )

            self.assertNotEqual(
                first=parsed['creation_date'],
                second=None,
            )

            time.sleep(0.5)

    def test_net(
        self,
    ):
        for domain in (
            'accesstrade.net',
            'authorize.net',
            'behance.net',
            'bola.net',
            'cpanel.net',
            'daum.net',
            'discuz.net',
            'doubleclick.net',
            'fbcdn.net',
            'isimtescil.net',
            'ovh.net',
            'php.net',
            'rs6.net',
            'secureserver.net',
            'slideshare.net',
            'themeforest.net',
            'uk2.net',
            'wordpress-fr.net',
        ):
            whois_querier = querier.Querier()
            parsed = whois_querier.query(
                domain=domain,
            )

            self.assertNotEqual(
                first=parsed['creation_date'],
                second=None,
            )

            time.sleep(0.5)

    def test_org(
        self,
    ):
        for domain in (
            'aboutcookies.org',
            'allaboutcookies.org',
            'ap.org',
            'apache.org',
            'archive.org',
            'bbb.org',
            'creativecommons.org',
            'debian.org',
            'doi.org',
            'drupal.org',
            'gnu.org',
            'icann.org',
            'ieee.org',
            'ietf.org',
            'iso.org',
            'joomla.org',
            'mediawiki.org',
            'moodle.org',
            'mozilla-europe.org',
            'mozilla.org',
            'networkadvertising.org',
            'nginx.org',
            'npr.org',
            'oecd.org',
            'olympic.org',
            'opensource.org',
            'openstreetmap.org',
            'oxfordjournals.org',
            'pbs.org',
            'pewinternet.org',
            'python.org',
            'redcross.org',
            'telnic.org',
            'un.org',
            'unesco.org',
            'unicef.org',
            'w3.org',
            'wikimedia.org',
            'wikipedia.org',
            'wordpress.org',
            'worldbank.org',
        ):
            try:
                whois_querier = querier.Querier()
                parsed = whois_querier.query(
                    domain=domain,
                )

                self.assertNotEqual(
                    first=parsed['creation_date'],
                    second=None,
                )

                time.sleep(0.5)
            except querier.Blocked:
                time.sleep(10)

    def test_invalid_domain(
        self,
    ):
        whois_querier = querier.Querier()

        self.assertRaises(
            querier.InvalidDomain,
            whois_querier.query,
            'kjlasdnflkjandsf.asdfasdf.asdf'
        )

    def test_blocked(
        self,
    ):
        whois_querier = querier.Querier()

        block_raised = False
        for i in range(10):
            try:
                whois_querier.query('google.fr')
            except querier.Blocked:
                block_raised = True

        self.assertTrue(block_raised)

    def test_invalid_date(
        self,
    ):
        for domain in (
                'j24.com.br',
        ):
            whois_querier = querier.Querier()
            parsed = whois_querier.query(
                domain=domain,
            )

            self.assertGreaterEqual(
                a=parsed['creation_date'].year,
                b=1970,
            )

            time.sleep(0.5)
